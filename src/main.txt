// Arduino
#include <Arduino.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <MFRC522.h>

// C
#include <stdlib.h>

// RFID variable
#define RST_PIN 49
#define SS_PIN 53
MFRC522 *mfrc522;

// Motor variable
#define PWMB 13 // Left
#define BIN1 5 
#define BIN2 6 
#define PWMA 12 // Right
#define AIN1 2 
#define AIN2 3 

// Car controlling
int strflg = 0;
int suml = 0, sumr = 0;

const double Avel = 250; 
const double Bvel = 245; 
// 100, 110, 010, 011, 001 
const double adj[8] = {0, -30, -50, -40, -80, 0, -60, 0};
const double slow = 0.7;
const double turnSlow = 0.5;
const double backSlow = 0.5;
const int magicSec = 100;

// PID Controller Variables
const int err[8] = {0, 2, 5, 3, 9, 0, 7, 0};
const double kp = 10.0; // Proportional gain
const double ki = 0.0; // Integral gain
const double kd = 2.0; // Derivative gain
double lastError = 0;
double integral = 0;

// Eyes
const int irRead[] = {30, 32, 34, 36, 38, 40, 42};
const int irNum = 7;

// BT variables
SoftwareSerial BT(11, 10);

// Queue
#define MAXN 300
char Queue[MAXN];
int str = 0, end = 0;

// Functions declaration
void setupRFID();
void setupMotor();
void setupIR();
void setupBT();

void loopRFID();
void loopBT();
void loopWalking();

inline void waitToStart();
inline void carControl(char);
inline void dynamicTurningRight();
inline void dynamicTurningLeft();
inline void goStraight();
inline void stopWalking();
inline void fixedTurningBack();

inline bool status(int x) { return x >= 0; }

inline void setSpeed(int pos, int speed) {
    analogWrite(pos, abs(speed));
    if (pos == PWMA) {
        digitalWrite(AIN1, status(speed));
        digitalWrite(AIN2, !status(speed));
    } else {
        digitalWrite(BIN1, status(speed));
        digitalWrite(BIN2, !status(speed));
    }
}

void setup() {
    Serial.begin(9600);
    setupRFID();
    setupMotor();
    setupIR();
    setupBT();
}

inline int updl() { 
    return 4 * (digitalRead(irRead[0])) + 2 * (digitalRead(irRead[1])) + digitalRead(irRead[2]);
}
inline int updr() { 
    return 4 * (digitalRead(irRead[6])) + 2 * (digitalRead(irRead[5])) + digitalRead(irRead[4]);
}
inline double calculatePID(int leftValue, int rightValue) {
    double error = leftValue - rightValue; 
    integral += error; 
    double derivative = error - lastError;
    lastError = error; 
    return (kp * error) + (ki * integral) + (kd * derivative); 
}
inline void resetPID() {
    integral = lastError = 0;
}

void loop() {
    // waitToStart();
    // setSpeed(PWMA, Avel * slow);
    // setSpeed(PWMB, Bvel * slow);
    // return;
    loopWalking();
    loopRFID();
    loopBT();
}

inline void waitToStart() {
    // setSpeed(PWMA, 100);
    // setSpeed(PWMB, 100);
    if (strflg) return;
    while(true) {
        if (BT.available()) {
            char c = BT.read();
            strflg = 1;
            Queue[end++] = c;
            break;
        }
    }
}

void loopWalking() {
    // if (digitalRead(irRead[2]) && digitalRead(irRead[4]) && digitalRead(irRead[3])) {
    if (digitalRead(irRead[1]) && digitalRead(irRead[5])) {
        resetPID();
        if (str < end) {
            carControl(Queue[str]);
            BT.println(Queue[str]);
            str++;
        } else {
            carControl('b');
            BT.println('t');
        }
    }
    
    suml = updl(); 
    sumr = updr();
    
    double correction = calculatePID(err[suml], err[sumr]);
    double rightSpeed = (Avel - kp * err[sumr]) * slow; 
    double leftSpeed = (Bvel - kp * err[suml]) * slow; 

    // double rightSpeed = (Avel + correction) * slow; 
    // double leftSpeed = (Bvel - correction) * slow; 

    setSpeed(PWMA, constrain(rightSpeed, 0, 255));  
    setSpeed(PWMB, constrain(leftSpeed, 0, 255));
    
    // setSpeed(PWMA, (Avel + adj[sumr]) * slow); // R
    // setSpeed(PWMB, (Bvel + adj[suml]) * slow); // L
}

inline void dynamicTurningRight() { // TODO
    suml = updl(), sumr = updr();
    setSpeed(PWMA, Avel * 0.0);
    setSpeed(PWMB, Bvel * turnSlow);
    delay(magicSec);
    while (suml >= 3 || sumr >= 3) {
    // while (!digitalRead(irRead[6]) || digitalRead(irRead[5]) || digitalRead(irRead[4])) {
        suml = updl(), sumr = updr();
        setSpeed(PWMA, Avel * 0.0);
        setSpeed(PWMB, Bvel * turnSlow);
    }
}

inline void dynamicTurningLeft() { // TODO
    // while (suml == 3 || sumr == 3) {
    suml = updl(), sumr = updr();
    setSpeed(PWMA, Avel * turnSlow);
    setSpeed(PWMB, Bvel * 0.0);
    delay(magicSec);
    while (suml >= 3 || sumr >= 3) {
    // while (!digitalRead(irRead[0]) || digitalRead(irRead[1]) || digitalRead(irRead[2])) {
        suml = updl(), sumr = updr();
        setSpeed(PWMA, Avel * turnSlow);
        setSpeed(PWMB, Bvel * 0.0);
    }
}

inline void goStraight() {
    suml = updl(), sumr = updr();
    while (suml >= 3 && sumr >= 3) {
        setSpeed(PWMA, Avel * slow);
        setSpeed(PWMB, Bvel * slow);
        suml = updl(), sumr = updr();
    }
}

inline void stopWalking() {
    setSpeed(PWMA, 0);
    setSpeed(PWMB, 0);
    strflg = 0;
}

inline void fixedTurningBack() {
    // suml = updl();
    // sumr = updr();
    // while (!digitalRead(irRead[6]) ||  digitalRead(irRead[3]) || digitalRead(irRead[4]) || digitalRead(irRead[5])) {
    while (!digitalRead(irRead[6]) || digitalRead(irRead[4]) || digitalRead(irRead[5])) {
        setSpeed(PWMA, Avel * -backSlow);
        setSpeed(PWMB, Bvel * backSlow * 0.9);
        // suml = updl(), sumr = updr();
    }
    setSpeed(PWMA, 0);
    setSpeed(PWMB, 0);
    delay(100);
    // setSpeed(PWMA, Avel * turnSlow); 
    // setSpeed(PWMB, Bvel * turnSlow); 
}

inline void carControl(char cmd) {
    switch(cmd) {
        case 'f':
            goStraight();
            break;
        case 'b':
            fixedTurningBack();
            break;
        case 'r':
            dynamicTurningRight();
            break;
        case 'l':
            dynamicTurningLeft();
            break;
        case 'x':
            stopWalking();
            break;
    }
}

void setupRFID() {
    Serial.println("RFID setup:");
    SPI.begin();
    mfrc522 = new MFRC522(SS_PIN, RST_PIN);
    mfrc522->PCD_Init();
    Serial.println(F("Read UID on a MIFARE PICC:"));
}

void loopRFID() {
    mfrc522->PCD_Init();
    
    if (!mfrc522->PICC_IsNewCardPresent()) return;
    if (!mfrc522->PICC_ReadCardSerial()) return;

    // Serial.println(F("**Card Detected:**"));
    // BT.println(F("**Card Detected:**"));
    
    // Serial.print("ID: ");
    // BT.print("ID: ");
    
    for (byte i = 0; i < mfrc522->uid.size; i++) {
        char buffer[3];
        sprintf(buffer, "%02X", mfrc522->uid.uidByte[i]);
        // Serial.print(buffer);
        BT.print(buffer);
        // if (i < mfrc522->uid.size - 1) {
            // Serial.print(":");
            // BT.print(":");
        // }
    }
    // Serial.println();
    BT.println();
    BT.flush();
   
    mfrc522->PICC_HaltA();
    mfrc522->PCD_StopCrypto1();
}

void setupMotor() {
    Serial.println("Motor setup:");
    pinMode(PWMA, OUTPUT);
    pinMode(AIN1, OUTPUT);
    pinMode(AIN2, OUTPUT);
    pinMode(PWMB, OUTPUT);
    pinMode(BIN1, OUTPUT);
    pinMode(BIN2, OUTPUT);
}

void setupIR() {
    Serial.println("IR setup:");
    for (int i = 0; i < irNum; i++) {
        pinMode(irRead[i], INPUT);
    }
}

void setupBT() {
    Serial.println("BT setup:");
    BT.begin(9600);
}

void loopBT() {
    if (Serial.available()) {
        char c = Serial.read();
        Serial.print(c);
        BT.println(c);
    }
    while (BT.available()) {
        char c = BT.read();
        Queue[end++] = c;
        // BT.println('r');
        Serial.print(c);
    }
}